{"version":3,"file":"app.js","sourceRoot":"","sources":["app.ts"],"names":[],"mappings":"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","sourcesContent":["var game = new Phaser.Game(800, 400, Phaser.AUTO, 'test', null, true, false);\n\nvar BasicGame = function (game) { };\n\nBasicGame.Boot = function (game) { };\n\nvar isoGroup, cursorPos, cursor;\n\nBasicGame.Boot.prototype =\n    {\n        preload: function () {\n            game.load.image('tile', 'tile.png');\n\n            game.time.advancedTiming = true;\n\n            // Add and enable the plug-in.\n            game.plugins.add(new Phaser.Plugin.Isometric(game));\n\n            // This is used to set a game canvas-based offset for the 0, 0, 0 isometric coordinate - by default\n            // this point would be at screen coordinates 0, 0 (top left) which is usually undesirable.\n            game.iso.anchor.setTo(0.5, 0.2);\n\n\n        },\n        create: function () {\n\n            // Create a group for our tiles.\n            isoGroup = game.add.group();\n\n            // Let's make a load of tiles on a grid.\n            this.spawnTiles();\n\n            // Provide a 3D position for the cursor\n            cursorPos = new Phaser.Plugin.Isometric.Point3();\n        },\n        update: function () {\n            // Update the cursor position.\n            // It's important to understand that screen-to-isometric projection means you have to specify a z position manually, as this cannot be easily\n            // determined from the 2D pointer position without extra trickery. By default, the z position is 0 if not set.\n            game.iso.unproject(game.input.activePointer.position, cursorPos);\n\n            // Loop through all tiles and test to see if the 3D position from above intersects with the automatically generated IsoSprite tile bounds.\n            isoGroup.forEach(function (tile) {\n                var inBounds = tile.isoBounds.containsXY(cursorPos.x, cursorPos.y);\n                // If it does, do a little animation and tint change.\n                if (!tile.selected && inBounds) {\n                    tile.selected = true;\n                    tile.tint = 0x86bfda;\n                    game.add.tween(tile).to({ isoZ: 4 }, 200, Phaser.Easing.Quadratic.InOut, true);\n                }\n                // If not, revert back to how it was.\n                else if (tile.selected && !inBounds) {\n                    tile.selected = false;\n                    game.add.tween(tile).to({ isoZ: 0 }, 200, Phaser.Easing.Quadratic.InOut, true);\n                }\n            });\n        },\n        render: function () {\n            game.debug.text(\"Move your mouse around!\", 2, 36, \"#ffffff\");\n            game.debug.text(game.time.fps || '--', 2, 14, \"#a7aebe\");\n        },\n        spawnTiles: function () {\n            $.ajax({\n                dataType: \"json\",\n                url: 'http://localhost:8000/tiles/all',\n                success: function (data) {\n                    var map = [[],[],[],[],[],[]];\n                    $.each(data, function (i, element) {\n                        map[element.y][element.x] = element.terrain;\n                    });\n\n                    var terrain = [\n                        0x55ff55, //grass\n                        0xffff55, //sand\n                        0x555555, //rock\n                        0x5555ff  //water\n                    ];\n                    var tiles_x = 5;\n                    var tiles_y = 5;\n                    var tiles_w = 36.57;\n                    for (var xx = 1; xx <= tiles_x; xx++) {\n                        for (var yy = 1; yy <= tiles_y; yy++) {\n                            // Create a tile using the new game.add.isoSprite factory method at the specified position.\n                            // The last parameter is the group you want to add it to (just like game.add.sprite)\n                            tile = game.add.isoSprite(xx*38, yy*38, 0, 'tile', 0, isoGroup);\n                            tile.tint  = terrain[map[xx][yy]];\n                            console.log(terrain[map[xx][yy]]);\n                            tile.anchor.set(0.5, 0);\n                        }\n                    }\n                }\n            });\n        }\n    };\n\ngame.state.add('Boot', BasicGame.Boot);\ngame.state.start('Boot');\n"]}