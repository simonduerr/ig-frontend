{"version":3,"file":"app.js","sourceRoot":"","sources":["app.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"phaser.d.ts\"/>\n/// <reference path=\"phaser.plugin.isometric.d.ts\"/>\nimport IsoSprite = Phaser.Plugin.Isometric.IsoSprite;\n\nclass BasicGame {\n    game: Phaser.Game;\n    tiles = [[], [], [], [], [], []];\n    builtObjects: { [id: number]: builtObject; } = {};\n    clickableObjects: clickableInterface[] = [];\n    isoGroup;\n    clickableGroup;\n    cursorPos;\n    cursor;\n\n    constructor() {\n        this.game = new Phaser.Game(800, 400, Phaser.CANVAS, 'content', {\n            create: this.create,\n            preload: this.preload,\n            render: this.render,\n            update: this.update\n        }, true, false, null);\n    }\n\n    preload = () => {\n        this.game.load.image('tile', 'tile.png');\n        this.game.load.image('house1', 'tile-house.png');\n\n        this.game.time.advancedTiming = true;\n        this.game.plugins.add(new Phaser.Plugin.Isometric(this.game));\n\n        // This is used to set a game canvas-based offset for the 0, 0, 0 isometric coordinate - by default\n        // this point would be at screen coordinates 0, 0 (top left) which is usually undesirable.\n        this.game.iso.anchor.setTo(0.5, 0.2);\n        this.game.physics.startSystem(Phaser.Plugin.Isometric.ISOARCADE);\n\n\n    };\n    create = () => {\n        // Create a group for our tiles.\n        this.isoGroup = this.game.add.group();\n        this.clickableGroup = this.game.add.group();\n        this.spawnTiles();\n\n        // Provide a 3D position for the cursor\n        this.cursorPos = new Phaser.Plugin.Isometric.Point3();\n\n        // this.clickableGroup.enableBody = true;\n        // this.clickableGroup.physicsBodyType = Phaser.Plugin.Isometric.ISOARCADE;\n\n    };\n    update = () => {\n        if (this.game.input.activePointer.leftButton.justReleased(20)) {\n            //TODO: 1. check buttons\n\n            //2. check builtObjects\n\n            // Update the cursor position.\n            // It's important to understand that screen-to-isometric projection means you have to specify a z position manually, as this cannot be easily\n            // determined from the 2D pointer position without extra trickery. By default, the z position is 0 if not set.\n            this.game.iso.unproject(this.game.input.activePointer.position, this.cursorPos);\n\n            let selectedObject = null;\n            this.clickableGroup.forEach((builtObject) => {\n                let inBounds = builtObject.isoBounds.containsXY(this.cursorPos.x, this.cursorPos.y);\n                if (!selectedObject && !builtObject.selected && inBounds) {\n                    builtObject.selected = true;\n                    this.game.add.tween(builtObject).to({isoZ: 4}, 200, Phaser.Easing.Quadratic.InOut, true);\n                    selectedObject = builtObject;\n                    console.log(builtObject.isoBounds);\n                    console.log(this.cursorPos);\n                    console.log(selectedObject.customId);\n                }\n            });\n\n            if (!selectedObject) {\n                //3. check tiles\n                // Loop through all tiles and test to see if the 3D position from above intersects with the automatically generated IsoSprite tile bounds.\n                this.isoGroup.forEach((tile) => {\n                    let inBounds = tile.isoBounds.containsXY(this.cursorPos.x, this.cursorPos.y);\n                    // If it does, do a little animation and tint change.\n                    if (!tile.selected && inBounds) {\n                        tile.selected = true;\n                        this.onDown(tile);\n                        this.game.add.tween(tile).to({isoZ: 4}, 200, Phaser.Easing.Quadratic.InOut, true);\n                    }\n                    // If not, revert back to how it was.\n                    else if (tile.selected && !inBounds) {\n                        tile.selected = false;\n                        this.game.add.tween(tile).to({isoZ: 0}, 200, Phaser.Easing.Quadratic.InOut, true);\n                    }\n                });\n            }\n        }\n    };\n    render = () => {\n        this.game.debug.text(\"Move your mouse around!\", 2, 36, \"#ffffff\");\n        this.game.debug.text(this.game.time.fps || '--', 2, 14, \"#a7aebe\");\n        this.clickableGroup.forEach((tile) => {\n            this.game.debug.body(tile, \"#00dd00\", false);\n        });\n    };\n    spawnTiles = () => {\n        $.ajax({\n            dataType: \"json\",\n            url: 'http://localhost:8000/tiles/all',\n            success: (data) => {\n                let terrain = [\n                    0x55ff55, //grass\n                    0xffff55, //sand\n                    0x555555, //rock\n                    0x5555ff  //water\n                ];\n                let buildingSprites: { [id: number]: string; } = {\n                    1: 'house1',\n                    2: 'house1'\n                };\n                let buildingColors: { [id: number]: number; } = {\n                    1: 0xff9999,\n                    2: 0xff2222\n                };\n                console.log(data);\n                $.each(data.builtObjects, (i, element) => {\n                    this.builtObjects[element.id] = element;\n                });\n                $.each(data.tiles, (i, element) => {\n                    this.tiles[element.y][element.x] = element;\n                });\n                this.tiles.forEach((row, yy) => {\n                    row.forEach((element, xx) => {\n                        let tile = this.game.add.isoSprite(xx * 38, yy * 38, 0, 'tile', 0, this.isoGroup);\n                        tile.tint = terrain[element.terrain];\n                        tile.anchor.set(0.5, 0);\n                        tile.inputEnabled = true;\n                        tile.customId = element.id;\n                        tile.builtObject = element.builtObject;\n\n                        if (element.builtObject) {\n                            console.log(element.builtObject);\n                            let building = this.builtObjects[element.builtObject];\n                            let builtObject = this.game.add.isoSprite(xx * 38, yy * 38, 0, buildingSprites[building.object], 0, this.clickableGroup);\n                            builtObject.anchor.set(0.5, 0.5);\n                            builtObject.tint = buildingColors[building.object];\n                            builtObject.customId = element.builtObject;\n                            builtObject.inputEnabled = true;\n                            this.clickableObjects.push(builtObject);\n                        }\n                    });\n                });\n            }\n        });\n    };\n\n    onDown(sprite) {\n        sprite.alpha = 0.5;\n        console.log('onDown');\n        console.log(sprite.customId);\n    }\n}\n\ninterface builtObject extends clickableInterface {\n    id: number;\n    selected: boolean;\n\n    level: number;\n    type: number;\n    object: number;\n}\n\ninterface clickableInterface extends IsoSprite {\n    id: number;\n    selected: boolean;\n}\n\n\nwindow.onload = () => {\n    let game = new BasicGame();\n};\n"]}