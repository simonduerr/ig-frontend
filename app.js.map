{"version":3,"file":"app.js","sourceRoot":"","sources":["app.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"phaser.d.ts\"/>\nclass BasicGame {\n    game: Phaser.Game;\n    tiles = [[], [], [], [], [], []];\n    isoGroup;\n    cursorPos;\n    cursor;\n\n    constructor() {\n        this.game = new Phaser.Game(800, 400, Phaser.CANVAS, 'content', {\n            create: this.create,\n            preload: this.preload,\n            render: this.render,\n            update: this.update\n        }, true, false, null);\n    }\n\n    preload = () => {\n        this.game.load.image('tile', 'tile.png');\n\n        this.game.time.advancedTiming = true;\n        this.game.plugins.add(new Phaser.Plugin.Isometric(this.game));\n\n        // This is used to set a game canvas-based offset for the 0, 0, 0 isometric coordinate - by default\n        // this point would be at screen coordinates 0, 0 (top left) which is usually undesirable.\n        this.game.iso.anchor.setTo(0.5, 0.2);\n\n    };\n    create = () => {\n        // Create a group for our tiles.\n        this.isoGroup = this.game.add.group();\n\n        // Let's make a load of tiles on a grid.\n        this.spawnTiles();\n\n        // Provide a 3D position for the cursor\n        this.cursorPos = new Phaser.Plugin.Isometric.Point3();\n    };\n    update = () => {\n        if(this.game.input.activePointer.leftButton.isDown)\n        {\n            // Update the cursor position.\n            // It's important to understand that screen-to-isometric projection means you have to specify a z position manually, as this cannot be easily\n            // determined from the 2D pointer position without extra trickery. By default, the z position is 0 if not set.\n            this.game.iso.unproject(this.game.input.activePointer.position, this.cursorPos);\n\n            // Loop through all tiles and test to see if the 3D position from above intersects with the automatically generated IsoSprite tile bounds.\n            this.isoGroup.forEach((tile) => {\n                let inBounds = tile.isoBounds.containsXY(this.cursorPos.x, this.cursorPos.y);\n                // If it does, do a little animation and tint change.\n                if (!tile.selected && inBounds) {\n                    tile.selected = true;\n                    this.onDown(tile);\n                    this.game.add.tween(tile).to({isoZ: 4}, 200, Phaser.Easing.Quadratic.InOut, true);\n                }\n                // If not, revert back to how it was.\n                else if (tile.selected && !inBounds) {\n                    tile.selected = false;\n                    this.game.add.tween(tile).to({isoZ: 0}, 200, Phaser.Easing.Quadratic.InOut, true);\n                }\n            });\n        }\n    };\n    render = () => {\n        this.game.debug.text(\"Move your mouse around!\", 2, 36, \"#ffffff\");\n        this.game.debug.text(this.game.time.fps || '--', 2, 14, \"#a7aebe\");\n    };\n    spawnTiles = () => {\n        $.ajax({\n            dataType: \"json\",\n            url: 'http://localhost:8000/tiles/all',\n            success: (data) => {\n                let terrain = [\n                    0x55ff55, //grass\n                    0xffff55, //sand\n                    0x555555, //rock\n                    0x5555ff  //water\n                ];\n\n                $.each(data, (i, element) => {\n                    this.tiles[element.y][element.x] = element;\n                });\n                let tiles_x = 5;\n                let tiles_y = 5;\n                let tiles_w = 36.57;\n                this.tiles.forEach((row, yy) => {\n                    row.forEach((element, xx) => {\n                        let tile = this.game.add.isoSprite(xx * 38, yy * 38, 0, 'tile', 0, this.isoGroup);\n                        tile.tint = terrain[element.terrain];\n                        tile.anchor.set(0.5, 0);\n                        tile.inputEnabled = true;\n                        tile.customId = element.id;\n                    });\n                });\n            }\n        });\n    };\n\n    onDown(sprite) {\n        sprite.alpha = 0.5;\n        console.log('onDown');\n        console.log(sprite.customId);\n    }\n}\n\n\nwindow.onload = () => {\n    let game = new BasicGame();\n};\n"]}